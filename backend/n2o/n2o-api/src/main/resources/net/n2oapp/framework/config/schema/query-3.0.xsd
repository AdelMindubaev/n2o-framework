<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://n2oapp.net/framework/config/schema/query-3.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dmn="http://n2oapp.net/framework/config/schema/base/domain-base-1.0">

    <xs:element name="query" type="queryDefinition"/>

    <!--определение выборки-->
    <xs:complexType name="queryDefinition">
        <xs:sequence>
            <!--идентификатор объекта, на основе которого сделана выборка-->
            <xs:element name="object-id" type="xs:string" maxOccurs="1" minOccurs="1"/>
            <!--локализованное наименование выборки-->
            <!--по умолчанию равно элементу name объекта, на основе которого сделана выборка-->
            <xs:element name="name" type="xs:string" maxOccurs="1" minOccurs="1"/>
            <xs:element name="execution" maxOccurs="1" minOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:any namespace="##other" processContents="strict" minOccurs="1" maxOccurs="1"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="fields" type="fieldList" maxOccurs="1" minOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!--определение поля выборки-->
    <xs:complexType name="fieldDefinition">
        <xs:sequence>
            <!--строковый локалиный (в рамках выборки) уникальный идентификатор поля выборки-->
            <xs:element name="id" type="fieldId" maxOccurs="1" minOccurs="1"/>
            <!--локализованное наименование поля выборки-->
            <xs:element name="name" type="xs:string" maxOccurs="1" minOccurs="0"/>
            <xs:element name="domain" type="dmn:domainType" maxOccurs="1" minOccurs="1"/>
            <!--выражение, которое можно использовать в display/search/sorting свойствах, с помощью place-holder :expression-->
            <!--по умолчанию равен значению alias + "." + значению атрибута id-->
            <xs:element name="expression" type="anyElement" maxOccurs="1" minOccurs="0"/>
            <!--если отсутствует :select в запросе выборки, display является SpEL выражением, применяемым к первому возвращаемому объекту, каждой записи выборки-->
            <!--если присутствует :select в запросе выборки, display является SQL/JPQL выражением, вставляемым в selectClause-->
            <!--по умолчанию равен ':expression'-->
            <xs:element name="display" type="displayElementDefinition" maxOccurs="1" minOccurs="0"/>
            <xs:element name="filters" type="filtersElementDefinition" maxOccurs="1" minOccurs="0"/>
            <!--является SQL/JPQL выражением, вставляемым в orderByClause-->
            <!--если отсутствует :select, sorting по умолчанию равен значению атрибута display-->
            <!--если присутствует :select, sorting по умолчанию равен порядковому индексу поля выборки-->

            <xs:element name="join" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:element name="sorting" type="xs:string" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>


    <!--список полей выборки-->
    <xs:complexType name="fieldList">
        <xs:sequence>
            <xs:element name="field" type="fieldDefinition" maxOccurs="unbounded" minOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!--определение элемента с произвольной структурой-->
    <xs:complexType name="anyElement">
        <xs:sequence>
            <xs:any/>
        </xs:sequence>
        <xs:anyAttribute namespace="##local" processContents="skip"/>
    </xs:complexType>

    <!--определение элемента filters-->
    <xs:complexType name="filtersElementDefinition">
        <xs:sequence>
            <xs:element name="filter" type="filterDef" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="auto-generate" use="optional" type="xs:boolean"/>
    </xs:complexType>

    <!--определение элемента display-->
    <xs:complexType name="displayElementDefinition">
        <xs:attribute name="default-value" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:simpleType name="searchTypeEnumeration">
        <xs:restriction base="xs:string">
            <xs:enumeration value="eq"/>
            <xs:enumeration value="notEq"/>
            <xs:enumeration value="isNull"/>
            <xs:enumeration value="isNotNull"/>
            <xs:enumeration value="in"/>
            <xs:enumeration value="notIn"/>
            <xs:enumeration value="more"/>
            <xs:enumeration value="less"/>
            <xs:enumeration value="eqOrIsNull"/>
            <xs:enumeration value="inOrIsNull"/>
            <xs:enumeration value="like"/>
            <xs:enumeration value="likeStart"/>
            <xs:enumeration value="overlap"/>
            <xs:enumeration value="contains"/>
        </xs:restriction>
    </xs:simpleType>

    <!--стандартные идентификаторы поля выборки-->
    <xs:simpleType name="fieldId">
        <xs:union memberTypes="xs:string">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <!--поле является идентификатором объекта, на основе которого сделана выборка-->
                    <xs:enumeration value="id"/>
                    <!--поле является отображаемым значением объекта, на основе которого сделана выборка-->
                    <xs:enumeration value="displayName"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:union>
    </xs:simpleType>

    <!-- * синтаксис запросов-->
    <!--в запросе могут присутствовать следующие place-holders:-->
    <!--:select если присутствует данный place-holder, значение атрибута display полей выборки вставляются через запятую в selectClause, с алиасом равным идентификатору выборки-->
    <!--:where если присутствует данный place-holder, значение search полей выборки вставляются через оператор and в whereClause-->


    <xs:complexType name="filterDef">
        <xs:attribute name="type" use="required" type="searchTypeEnumeration"/>
        <xs:attribute name="filter-field" use="required"/>
        <xs:attribute name="default-value" use="optional"/>
        <xs:attribute name="domain" use="optional" type="dmn:domainType"/>
        <xs:attribute name="normalize" use="optional" type="xs:string"/>
    </xs:complexType>
</xs:schema>