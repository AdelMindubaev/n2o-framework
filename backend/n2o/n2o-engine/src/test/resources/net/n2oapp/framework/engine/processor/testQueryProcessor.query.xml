<?xml version='1.0' encoding='UTF-8'?>
<query xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0"
       xmlns="http://n2oapp.net/framework/config/schema/query-3.0">
    <name>testQueryProcessor</name>
    <execution>
        <n2o:sql>
            <n2o:items-query>select :select
                from testQueryProcessor a
                :join
                where :filters
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(a)
                from testQueryProcessor a
                where :filters
            </n2o:count-query>
            <n2o:alias>a</n2o:alias>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>name</id>
            <name>Имя</name>
            <domain>string</domain>
            <sorting>sortingName</sorting>
            <join>inner join persons p on a.person_id = p.id</join>
        </field>
        <field>
            <id>surname</id>
            <name>Фамилия</name>
            <domain>string</domain>
            <expression>a.second_name</expression>
            <display>a.second_name</display>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="surname" default-value="default">a.second_name = :surname</filter><!--todo убрать тело, когда оно будет генерируемым -->
            </filters>
        </field>
        <field>
            <id>patr.name</id>
            <name>Отчество</name>
            <domain>string</domain>
            <display default-value="Без отчества">a.patr_name</display>
            <filters>
                <filter type="eq" filter-field="patrName" default-value="default">a.patr_name = :patrName</filter>
            </filters>
        </field>
        <field>
            <id>gender.name</id>
            <name>Пол</name>
            <domain>string</domain>
            <expression>g.genders</expression>
            <join>left join genders g on a.gender_id = g.id</join>
            <filters>
                <filter type="like" filter-field="genderName" normalize="#this.toLowerCase()">g.genders like :genderName</filter>
            </filters>
        </field>
    </fields>
</query>
