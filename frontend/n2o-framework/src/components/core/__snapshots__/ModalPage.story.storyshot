// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Действия/Модальное окно Prompt в модальном окне 1`] = `
<div
  style={
    Object {
      "padding": "2rem",
    }
  }
>
  <nav
    aria-label="breadcrumb"
  >
    <ol
      className="breadcrumb"
    >
      <li
        className="breadcrumb-item active"
      >
        Действия
      </li>
      <li
        className="breadcrumb-item active"
      >
        Модальное окно
      </li>
      <li
        className="breadcrumb-item active"
      >
        Prompt в модальном окне
      </li>
    </ol>
  </nav>
  <Card
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
      }
    }
    tag="div"
  >
    <CardBody
      style={
        Object {
          "flexBasis": "auto",
          "flexGrow": 1,
          "minWidth": "90%",
        }
      }
      tag="div"
    >
      <IntlProvider
        locale="ru"
        messages={Object {}}
      >
        <Provider
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
        >
          <withContext(SecurityProvider)
            authProvider={[Function]}
            redirectPath="/login"
          >
            <FactoryProvider
              config={
                Object {
                  "actions": Object {
                    "dummyImpl": [Function],
                    "exportTable": [Function],
                    "link": [Function],
                    "perform": [Function],
                  },
                  "cells": Object {
                    "BadgeCell": [Function],
                    "ButtonsCell": [Function],
                    "CheckboxCell": [Function],
                    "CollapsedCell": [Function],
                    "EditableCell": [Function],
                    "IconCell": [Function],
                    "ImageCell": [Function],
                    "LinkCell": [Function],
                    "ProgressBarCell": [Function],
                    "TextCell": [Function],
                  },
                  "controls": Object {
                    "AutoComplete": [Function],
                    "ButtonUploader": [Function],
                    "Checkbox": [Function],
                    "CheckboxGroup": [Function],
                    "CodeEditor": [Function],
                    "DateInterval": [Function],
                    "DatePicker": [Function],
                    "DropZone": [Function],
                    "Html": [Function],
                    "InputHidden": [Function],
                    "InputMask": [Function],
                    "InputMoney": [Function],
                    "InputNumber": [Function],
                    "InputSelect": [Function],
                    "InputSelectTree": [Function],
                    "InputText": [Function],
                    "N2OSelect": [Function],
                    "OutputText": [Function],
                    "PasswordInput": [Function],
                    "Pills": [Function],
                    "RadioGroup": [Function],
                    "Rating": [Function],
                    "Select": [Function],
                    "Slider": [Function],
                    "Switch": [Function],
                    "TextArea": [Function],
                    "TextEditor": [Function],
                  },
                  "fields": Object {
                    "FilterButtonsField": [Function],
                    "RangeField": [Function],
                    "StandardField": [Function],
                    "TextField": [Function],
                  },
                  "fieldsets": Object {
                    "CollapseFieldset": [Function],
                    "LineFieldset": [Function],
                    "StandardFieldset": [Function],
                    "TitleFieldset": [Function],
                  },
                  "headers": Object {
                    "TextTableHeader": [Function],
                  },
                  "layouts": Object {
                    "LeftRightLayout": [Function],
                    "LeftTopBottomLayout": [Function],
                    "SingleLayout": [Function],
                    "TopBottomLayout": [Function],
                  },
                  "regions": Object {
                    "ListRegion": [Function],
                    "NoneRegion": [Function],
                    "PanelRegion": [Function],
                    "TabsRegion": [Function],
                  },
                  "snippets": Object {
                    "Alert": [Function],
                    "Collapse": [Function],
                    "Icon": [Function],
                    "Panel": [Function],
                    "Paragraph": [Function],
                    "PopoverConfirm": [Function],
                    "Spinner": [Function],
                    "Text": [Function],
                    "Title": [Function],
                    "Wireframe": [Function],
                  },
                  "widgets": Object {
                    "AdvancedTableWidget": [Function],
                    "ChartWidget": [Function],
                    "EditForm": [Function],
                    "FormWidget": [Function],
                    "HtmlWidget": [Function],
                    "ListWidget": [Function],
                    "TableWidget": [Function],
                    "TreeWidget": [Function],
                    "WireframeWidget": [Function],
                  },
                }
              }
              securityBlackList={Array []}
            >
              <Connect(ConnectedRouter)
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "zybh0s",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "zybh0s",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
              >
                <div>
                  <Story
                    PropTable={[Function]}
                    components={
                      Object {
                        "a": [Function],
                        "code": [Function],
                        "h1": [Function],
                        "h2": [Function],
                        "h3": [Function],
                        "h4": [Function],
                        "h5": [Function],
                        "h6": [Function],
                        "li": [Function],
                        "p": [Function],
                        "ul": [Function],
                      }
                    }
                    context={
                      Object {
                        "hooks": HooksContext {
                          "currentContext": [Circular],
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                          },
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "действия-модальное-окно--prompt-в-модальном-окне",
                        "kind": "Действия/Модальное окно",
                        "name": "Prompt в модальном окне",
                        "parameters": Object {
                          "fileName": "C:\\\\Users\\\\sliskov\\\\Projects\\\\n2o-new\\\\frontend\\\\n2o\\\\src\\\\components\\\\core\\\\ModalPage.story.js",
                          "framework": "react",
                          "info": Object {
                            "propTables": Array [
                              [Function],
                            ],
                            "propTablesExclude": Array [
                              [Function],
                              [Function],
                            ],
                          },
                          "options": Object {
                            "hierarchyRootSeparator": "|",
                            "hierarchySeparator": /\\\\/\\|\\\\\\./,
                          },
                        },
                        "story": "Prompt в модальном окне",
                      }
                    }
                    excludedPropTypes={Array []}
                    info=""
                    maxPropArrayLength={3}
                    maxPropObjectKeys={3}
                    maxPropStringLength={50}
                    maxPropsIntoLine={3}
                    propTableCompare={[Function]}
                    propTables={
                      Array [
                        [Function],
                      ]
                    }
                    propTablesExclude={
                      Array [
                        [Function],
                        [Function],
                      ]
                    }
                    showHeader={true}
                    showInline={true}
                    showSource={false}
                    styles={[Function]}
                  >
                    <State
                      parseState={[Function]}
                      store={
                        Store {
                          "callbacks": Array [
                            Object {
                              "callback": [Function],
                              "subscription": "a53bf299-b124-41f9-8d21-4fb8b23398e1",
                            },
                          ],
                          "state": Object {
                            "visible": true,
                          },
                        }
                      }
                    >
                      <Factory
                        actions={
                          Object {
                            "showModal": Object {
                              "options": Object {
                                "payload": Object {
                                  "closeButton": true,
                                  "modelLink": "models.resolve['Uid']",
                                  "name": "Uid",
                                  "pageId": "Uid",
                                  "pageUrl": "/Uid",
                                  "pathMapping": Object {},
                                  "prompt": true,
                                  "size": "sm",
                                  "title": "\`'Заголовок: ' + modalTitle\`",
                                  "visible": true,
                                },
                                "type": "n2o/modals/INSERT",
                              },
                              "src": "perform",
                            },
                          }
                        }
                        form={
                          Object {
                            "fetchOnInit": false,
                            "fieldsets": Array [],
                          }
                        }
                        id="Page_Form"
                        level="widgets"
                        src="FormWidget"
                        toolbar={
                          Object {
                            "bottomLeft": Array [
                              Object {
                                "buttons": Array [
                                  Object {
                                    "actionId": "showModal",
                                    "id": "update",
                                    "title": "Открыть МО",
                                  },
                                ],
                              },
                            ],
                          }
                        }
                      />
                    </State>
                  </Story>
                  <withContext(Connect(ModalPages)) />
                </div>
              </Connect(ConnectedRouter)>
            </FactoryProvider>
          </withContext(SecurityProvider)>
        </Provider>
      </IntlProvider>
    </CardBody>
  </Card>
</div>
`;

exports[`Storyshots Действия/Модальное окно Компонент 1`] = `
<div
  style={
    Object {
      "padding": "2rem",
    }
  }
>
  <nav
    aria-label="breadcrumb"
  >
    <ol
      className="breadcrumb"
    >
      <li
        className="breadcrumb-item active"
      >
        Действия
      </li>
      <li
        className="breadcrumb-item active"
      >
        Модальное окно
      </li>
      <li
        className="breadcrumb-item active"
      >
        Компонент
      </li>
    </ol>
  </nav>
  <Card
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
      }
    }
    tag="div"
  >
    <CardBody
      style={
        Object {
          "flexBasis": "auto",
          "flexGrow": 1,
          "minWidth": "90%",
        }
      }
      tag="div"
    >
      <IntlProvider
        locale="ru"
        messages={Object {}}
      >
        <Provider
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
        >
          <withContext(SecurityProvider)
            authProvider={[Function]}
            redirectPath="/login"
          >
            <FactoryProvider
              config={
                Object {
                  "actions": Object {
                    "dummyImpl": [Function],
                    "exportTable": [Function],
                    "link": [Function],
                    "perform": [Function],
                  },
                  "cells": Object {
                    "BadgeCell": [Function],
                    "ButtonsCell": [Function],
                    "CheckboxCell": [Function],
                    "CollapsedCell": [Function],
                    "EditableCell": [Function],
                    "IconCell": [Function],
                    "ImageCell": [Function],
                    "LinkCell": [Function],
                    "ProgressBarCell": [Function],
                    "TextCell": [Function],
                  },
                  "controls": Object {
                    "AutoComplete": [Function],
                    "ButtonUploader": [Function],
                    "Checkbox": [Function],
                    "CheckboxGroup": [Function],
                    "CodeEditor": [Function],
                    "DateInterval": [Function],
                    "DatePicker": [Function],
                    "DropZone": [Function],
                    "Html": [Function],
                    "InputHidden": [Function],
                    "InputMask": [Function],
                    "InputMoney": [Function],
                    "InputNumber": [Function],
                    "InputSelect": [Function],
                    "InputSelectTree": [Function],
                    "InputText": [Function],
                    "N2OSelect": [Function],
                    "OutputText": [Function],
                    "PasswordInput": [Function],
                    "Pills": [Function],
                    "RadioGroup": [Function],
                    "Rating": [Function],
                    "Select": [Function],
                    "Slider": [Function],
                    "Switch": [Function],
                    "TextArea": [Function],
                    "TextEditor": [Function],
                  },
                  "fields": Object {
                    "FilterButtonsField": [Function],
                    "RangeField": [Function],
                    "StandardField": [Function],
                    "TextField": [Function],
                  },
                  "fieldsets": Object {
                    "CollapseFieldset": [Function],
                    "LineFieldset": [Function],
                    "StandardFieldset": [Function],
                    "TitleFieldset": [Function],
                  },
                  "headers": Object {
                    "TextTableHeader": [Function],
                  },
                  "layouts": Object {
                    "LeftRightLayout": [Function],
                    "LeftTopBottomLayout": [Function],
                    "SingleLayout": [Function],
                    "TopBottomLayout": [Function],
                  },
                  "regions": Object {
                    "ListRegion": [Function],
                    "NoneRegion": [Function],
                    "PanelRegion": [Function],
                    "TabsRegion": [Function],
                  },
                  "snippets": Object {
                    "Alert": [Function],
                    "Collapse": [Function],
                    "Icon": [Function],
                    "Panel": [Function],
                    "Paragraph": [Function],
                    "PopoverConfirm": [Function],
                    "Spinner": [Function],
                    "Text": [Function],
                    "Title": [Function],
                    "Wireframe": [Function],
                  },
                  "widgets": Object {
                    "AdvancedTableWidget": [Function],
                    "ChartWidget": [Function],
                    "EditForm": [Function],
                    "FormWidget": [Function],
                    "HtmlWidget": [Function],
                    "ListWidget": [Function],
                    "TableWidget": [Function],
                    "TreeWidget": [Function],
                    "WireframeWidget": [Function],
                  },
                }
              }
              securityBlackList={Array []}
            >
              <Connect(ConnectedRouter)
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "zybh0s",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "zybh0s",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
              >
                <div>
                  <Story
                    PropTable={[Function]}
                    components={
                      Object {
                        "a": [Function],
                        "code": [Function],
                        "h1": [Function],
                        "h2": [Function],
                        "h3": [Function],
                        "h4": [Function],
                        "h5": [Function],
                        "h6": [Function],
                        "li": [Function],
                        "p": [Function],
                        "ul": [Function],
                      }
                    }
                    context={
                      Object {
                        "hooks": HooksContext {
                          "currentContext": [Circular],
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                          },
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "действия-модальное-окно--компонент",
                        "kind": "Действия/Модальное окно",
                        "name": "Компонент",
                        "parameters": Object {
                          "fileName": "C:\\\\Users\\\\sliskov\\\\Projects\\\\n2o-new\\\\frontend\\\\n2o\\\\src\\\\components\\\\core\\\\ModalPage.story.js",
                          "framework": "react",
                          "info": Object {
                            "propTables": Array [
                              [Function],
                            ],
                            "propTablesExclude": Array [
                              [Function],
                              [Function],
                            ],
                          },
                          "options": Object {
                            "hierarchyRootSeparator": "|",
                            "hierarchySeparator": /\\\\/\\|\\\\\\./,
                          },
                        },
                        "story": "Компонент",
                      }
                    }
                    excludedPropTypes={Array []}
                    info=""
                    maxPropArrayLength={3}
                    maxPropObjectKeys={3}
                    maxPropStringLength={50}
                    maxPropsIntoLine={3}
                    propTableCompare={[Function]}
                    propTables={
                      Array [
                        [Function],
                      ]
                    }
                    propTablesExclude={
                      Array [
                        [Function],
                        [Function],
                      ]
                    }
                    showHeader={true}
                    showInline={true}
                    showSource={false}
                    styles={[Function]}
                  >
                    <State
                      parseState={[Function]}
                      store={
                        Store {
                          "callbacks": Array [
                            Object {
                              "callback": [Function],
                              "subscription": "a53bf299-b124-41f9-8d21-4fb8b23398e1",
                            },
                          ],
                          "state": Object {
                            "visible": true,
                          },
                        }
                      }
                    >
                      <ModalPage
                        close={[Function]}
                        disabled={false}
                        loading={false}
                        size="lg"
                        src="OutputText"
                        title="Заголовок компонента"
                        visible={true}
                      />
                    </State>
                  </Story>
                  <withContext(Connect(ModalPages)) />
                </div>
              </Connect(ConnectedRouter)>
            </FactoryProvider>
          </withContext(SecurityProvider)>
        </Provider>
      </IntlProvider>
    </CardBody>
  </Card>
</div>
`;

exports[`Storyshots Действия/Модальное окно Открытие модального окна 1`] = `
<div
  style={
    Object {
      "padding": "2rem",
    }
  }
>
  <nav
    aria-label="breadcrumb"
  >
    <ol
      className="breadcrumb"
    >
      <li
        className="breadcrumb-item active"
      >
        Действия
      </li>
      <li
        className="breadcrumb-item active"
      >
        Модальное окно
      </li>
      <li
        className="breadcrumb-item active"
      >
        Открытие модального окна
      </li>
    </ol>
  </nav>
  <Card
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
      }
    }
    tag="div"
  >
    <CardBody
      style={
        Object {
          "flexBasis": "auto",
          "flexGrow": 1,
          "minWidth": "90%",
        }
      }
      tag="div"
    >
      <IntlProvider
        locale="ru"
        messages={Object {}}
      >
        <Provider
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
        >
          <withContext(SecurityProvider)
            authProvider={[Function]}
            redirectPath="/login"
          >
            <FactoryProvider
              config={
                Object {
                  "actions": Object {
                    "dummyImpl": [Function],
                    "exportTable": [Function],
                    "link": [Function],
                    "perform": [Function],
                  },
                  "cells": Object {
                    "BadgeCell": [Function],
                    "ButtonsCell": [Function],
                    "CheckboxCell": [Function],
                    "CollapsedCell": [Function],
                    "EditableCell": [Function],
                    "IconCell": [Function],
                    "ImageCell": [Function],
                    "LinkCell": [Function],
                    "ProgressBarCell": [Function],
                    "TextCell": [Function],
                  },
                  "controls": Object {
                    "AutoComplete": [Function],
                    "ButtonUploader": [Function],
                    "Checkbox": [Function],
                    "CheckboxGroup": [Function],
                    "CodeEditor": [Function],
                    "DateInterval": [Function],
                    "DatePicker": [Function],
                    "DropZone": [Function],
                    "Html": [Function],
                    "InputHidden": [Function],
                    "InputMask": [Function],
                    "InputMoney": [Function],
                    "InputNumber": [Function],
                    "InputSelect": [Function],
                    "InputSelectTree": [Function],
                    "InputText": [Function],
                    "N2OSelect": [Function],
                    "OutputText": [Function],
                    "PasswordInput": [Function],
                    "Pills": [Function],
                    "RadioGroup": [Function],
                    "Rating": [Function],
                    "Select": [Function],
                    "Slider": [Function],
                    "Switch": [Function],
                    "TextArea": [Function],
                    "TextEditor": [Function],
                  },
                  "fields": Object {
                    "FilterButtonsField": [Function],
                    "RangeField": [Function],
                    "StandardField": [Function],
                    "TextField": [Function],
                  },
                  "fieldsets": Object {
                    "CollapseFieldset": [Function],
                    "LineFieldset": [Function],
                    "StandardFieldset": [Function],
                    "TitleFieldset": [Function],
                  },
                  "headers": Object {
                    "TextTableHeader": [Function],
                  },
                  "layouts": Object {
                    "LeftRightLayout": [Function],
                    "LeftTopBottomLayout": [Function],
                    "SingleLayout": [Function],
                    "TopBottomLayout": [Function],
                  },
                  "regions": Object {
                    "ListRegion": [Function],
                    "NoneRegion": [Function],
                    "PanelRegion": [Function],
                    "TabsRegion": [Function],
                  },
                  "snippets": Object {
                    "Alert": [Function],
                    "Collapse": [Function],
                    "Icon": [Function],
                    "Panel": [Function],
                    "Paragraph": [Function],
                    "PopoverConfirm": [Function],
                    "Spinner": [Function],
                    "Text": [Function],
                    "Title": [Function],
                    "Wireframe": [Function],
                  },
                  "widgets": Object {
                    "AdvancedTableWidget": [Function],
                    "ChartWidget": [Function],
                    "EditForm": [Function],
                    "FormWidget": [Function],
                    "HtmlWidget": [Function],
                    "ListWidget": [Function],
                    "TableWidget": [Function],
                    "TreeWidget": [Function],
                    "WireframeWidget": [Function],
                  },
                }
              }
              securityBlackList={Array []}
            >
              <Connect(ConnectedRouter)
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "zybh0s",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "zybh0s",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
              >
                <div>
                  <Story
                    PropTable={[Function]}
                    components={
                      Object {
                        "a": [Function],
                        "code": [Function],
                        "h1": [Function],
                        "h2": [Function],
                        "h3": [Function],
                        "h4": [Function],
                        "h5": [Function],
                        "h6": [Function],
                        "li": [Function],
                        "p": [Function],
                        "ul": [Function],
                      }
                    }
                    context={
                      Object {
                        "hooks": HooksContext {
                          "currentContext": [Circular],
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                          },
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "действия-модальное-окно--открытие-модального-окна",
                        "kind": "Действия/Модальное окно",
                        "name": "Открытие модального окна",
                        "parameters": Object {
                          "fileName": "C:\\\\Users\\\\sliskov\\\\Projects\\\\n2o-new\\\\frontend\\\\n2o\\\\src\\\\components\\\\core\\\\ModalPage.story.js",
                          "framework": "react",
                          "info": Object {
                            "propTables": Array [
                              [Function],
                            ],
                            "propTablesExclude": Array [
                              [Function],
                              [Function],
                            ],
                          },
                          "options": Object {
                            "hierarchyRootSeparator": "|",
                            "hierarchySeparator": /\\\\/\\|\\\\\\./,
                          },
                        },
                        "story": "Открытие модального окна",
                      }
                    }
                    excludedPropTypes={Array []}
                    info=""
                    maxPropArrayLength={3}
                    maxPropObjectKeys={3}
                    maxPropStringLength={50}
                    maxPropsIntoLine={3}
                    propTableCompare={[Function]}
                    propTables={
                      Array [
                        [Function],
                      ]
                    }
                    propTablesExclude={
                      Array [
                        [Function],
                        [Function],
                      ]
                    }
                    showHeader={true}
                    showInline={true}
                    showSource={false}
                    styles={[Function]}
                  >
                    <State
                      parseState={[Function]}
                      store={
                        Store {
                          "callbacks": Array [
                            Object {
                              "callback": [Function],
                              "subscription": "a53bf299-b124-41f9-8d21-4fb8b23398e1",
                            },
                          ],
                          "state": Object {
                            "visible": true,
                          },
                        }
                      }
                    >
                      <Factory
                        actions={
                          Object {
                            "showModal": Object {
                              "options": Object {
                                "payload": Object {
                                  "closeButton": true,
                                  "modelLink": "models.resolve['Uid']",
                                  "name": "test",
                                  "pageId": "Uid",
                                  "pageUrl": "/Uid",
                                  "pathMapping": Object {},
                                  "size": "sm",
                                  "title": "\`'Заголовок: ' + modalTitle\`",
                                  "visible": true,
                                },
                                "type": "n2o/modals/INSERT",
                              },
                              "src": "perform",
                            },
                          }
                        }
                        form={
                          Object {
                            "fetchOnInit": false,
                            "fieldsets": Array [],
                          }
                        }
                        id="Page_Form"
                        level="widgets"
                        src="FormWidget"
                        toolbar={
                          Object {
                            "bottomLeft": Array [
                              Object {
                                "buttons": Array [
                                  Object {
                                    "actionId": "showModal",
                                    "id": "update",
                                    "title": "Открыть МО",
                                  },
                                ],
                              },
                            ],
                          }
                        }
                      />
                    </State>
                  </Story>
                  <withContext(Connect(ModalPages)) />
                </div>
              </Connect(ConnectedRouter)>
            </FactoryProvider>
          </withContext(SecurityProvider)>
        </Provider>
      </IntlProvider>
    </CardBody>
  </Card>
</div>
`;

exports[`Storyshots Действия/Модальное окно Прелоадер модального окна 1`] = `
<div
  style={
    Object {
      "padding": "2rem",
    }
  }
>
  <nav
    aria-label="breadcrumb"
  >
    <ol
      className="breadcrumb"
    >
      <li
        className="breadcrumb-item active"
      >
        Действия
      </li>
      <li
        className="breadcrumb-item active"
      >
        Модальное окно
      </li>
      <li
        className="breadcrumb-item active"
      >
        Прелоадер модального окна
      </li>
    </ol>
  </nav>
  <Card
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
      }
    }
    tag="div"
  >
    <CardBody
      style={
        Object {
          "flexBasis": "auto",
          "flexGrow": 1,
          "minWidth": "90%",
        }
      }
      tag="div"
    >
      <IntlProvider
        locale="ru"
        messages={Object {}}
      >
        <Provider
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
        >
          <withContext(SecurityProvider)
            authProvider={[Function]}
            redirectPath="/login"
          >
            <FactoryProvider
              config={
                Object {
                  "actions": Object {
                    "dummyImpl": [Function],
                    "exportTable": [Function],
                    "link": [Function],
                    "perform": [Function],
                  },
                  "cells": Object {
                    "BadgeCell": [Function],
                    "ButtonsCell": [Function],
                    "CheckboxCell": [Function],
                    "CollapsedCell": [Function],
                    "EditableCell": [Function],
                    "IconCell": [Function],
                    "ImageCell": [Function],
                    "LinkCell": [Function],
                    "ProgressBarCell": [Function],
                    "TextCell": [Function],
                  },
                  "controls": Object {
                    "AutoComplete": [Function],
                    "ButtonUploader": [Function],
                    "Checkbox": [Function],
                    "CheckboxGroup": [Function],
                    "CodeEditor": [Function],
                    "DateInterval": [Function],
                    "DatePicker": [Function],
                    "DropZone": [Function],
                    "Html": [Function],
                    "InputHidden": [Function],
                    "InputMask": [Function],
                    "InputMoney": [Function],
                    "InputNumber": [Function],
                    "InputSelect": [Function],
                    "InputSelectTree": [Function],
                    "InputText": [Function],
                    "N2OSelect": [Function],
                    "OutputText": [Function],
                    "PasswordInput": [Function],
                    "Pills": [Function],
                    "RadioGroup": [Function],
                    "Rating": [Function],
                    "Select": [Function],
                    "Slider": [Function],
                    "Switch": [Function],
                    "TextArea": [Function],
                    "TextEditor": [Function],
                  },
                  "fields": Object {
                    "FilterButtonsField": [Function],
                    "RangeField": [Function],
                    "StandardField": [Function],
                    "TextField": [Function],
                  },
                  "fieldsets": Object {
                    "CollapseFieldset": [Function],
                    "LineFieldset": [Function],
                    "StandardFieldset": [Function],
                    "TitleFieldset": [Function],
                  },
                  "headers": Object {
                    "TextTableHeader": [Function],
                  },
                  "layouts": Object {
                    "LeftRightLayout": [Function],
                    "LeftTopBottomLayout": [Function],
                    "SingleLayout": [Function],
                    "TopBottomLayout": [Function],
                  },
                  "regions": Object {
                    "ListRegion": [Function],
                    "NoneRegion": [Function],
                    "PanelRegion": [Function],
                    "TabsRegion": [Function],
                  },
                  "snippets": Object {
                    "Alert": [Function],
                    "Collapse": [Function],
                    "Icon": [Function],
                    "Panel": [Function],
                    "Paragraph": [Function],
                    "PopoverConfirm": [Function],
                    "Spinner": [Function],
                    "Text": [Function],
                    "Title": [Function],
                    "Wireframe": [Function],
                  },
                  "widgets": Object {
                    "AdvancedTableWidget": [Function],
                    "ChartWidget": [Function],
                    "EditForm": [Function],
                    "FormWidget": [Function],
                    "HtmlWidget": [Function],
                    "ListWidget": [Function],
                    "TableWidget": [Function],
                    "TreeWidget": [Function],
                    "WireframeWidget": [Function],
                  },
                }
              }
              securityBlackList={Array []}
            >
              <Connect(ConnectedRouter)
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "zybh0s",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "zybh0s",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
              >
                <div>
                  <Story
                    PropTable={[Function]}
                    components={
                      Object {
                        "a": [Function],
                        "code": [Function],
                        "h1": [Function],
                        "h2": [Function],
                        "h3": [Function],
                        "h4": [Function],
                        "h5": [Function],
                        "h6": [Function],
                        "li": [Function],
                        "p": [Function],
                        "ul": [Function],
                      }
                    }
                    context={
                      Object {
                        "hooks": HooksContext {
                          "currentContext": [Circular],
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                          },
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "действия-модальное-окно--прелоадер-модального-окна",
                        "kind": "Действия/Модальное окно",
                        "name": "Прелоадер модального окна",
                        "parameters": Object {
                          "fileName": "C:\\\\Users\\\\sliskov\\\\Projects\\\\n2o-new\\\\frontend\\\\n2o\\\\src\\\\components\\\\core\\\\ModalPage.story.js",
                          "framework": "react",
                          "info": Object {
                            "propTables": Array [
                              [Function],
                            ],
                            "propTablesExclude": Array [
                              [Function],
                              [Function],
                            ],
                          },
                          "options": Object {
                            "hierarchyRootSeparator": "|",
                            "hierarchySeparator": /\\\\/\\|\\\\\\./,
                          },
                        },
                        "story": "Прелоадер модального окна",
                      }
                    }
                    excludedPropTypes={Array []}
                    info=""
                    maxPropArrayLength={3}
                    maxPropObjectKeys={3}
                    maxPropStringLength={50}
                    maxPropsIntoLine={3}
                    propTableCompare={[Function]}
                    propTables={
                      Array [
                        [Function],
                      ]
                    }
                    propTablesExclude={
                      Array [
                        [Function],
                        [Function],
                      ]
                    }
                    showHeader={true}
                    showInline={true}
                    showSource={false}
                    styles={[Function]}
                  >
                    <State
                      parseState={[Function]}
                      store={
                        Store {
                          "callbacks": Array [
                            Object {
                              "callback": [Function],
                              "subscription": "a53bf299-b124-41f9-8d21-4fb8b23398e1",
                            },
                          ],
                          "state": Object {
                            "visible": true,
                          },
                        }
                      }
                    >
                      <ModalPage
                        disabled={false}
                        size="lg"
                      />
                    </State>
                  </Story>
                  <withContext(Connect(ModalPages)) />
                </div>
              </Connect(ConnectedRouter)>
            </FactoryProvider>
          </withContext(SecurityProvider)>
        </Provider>
      </IntlProvider>
    </CardBody>
  </Card>
</div>
`;
